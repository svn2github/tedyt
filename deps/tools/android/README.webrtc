This folder contains precompiled copies of binaries produced by a Chromium
checkout that are needed to run Android tests.
We couldn't compile these tools from source since they depend on Chromium's
base source code, which is not available in WebRTC.

See the Subversion log for information of which Chromium revision the current
copy is based on.

The binaries are compiled for the default architecture for each platform (ia32
for Mac and x64 for Linux as of this writing).

To update these binaries:

Linux:
1. Create a WebRTC workspace with a solution having the target_os = ["android"]
   configuration added to the .gclient file as described at
   https://code.google.com/p/chromium/wiki/AndroidBuildInstructions

2. Make sure you've run gclient sync so you have tools/android checked out
   in the WebRTC workspace.

3. Checkout Chromium with the Android configuration added to your .gclient. See 
   https://code.google.com/p/chromium/wiki/AndroidBuildInstructions for more
   info.

4. Now, generate projects depending on which target platform you want to build
   for, compile the host_forwarder and md5sum targets in Release mode and 
   update the versions in the right locations. 

   This bash snippet should do it all for Linux:
   TOOLS_ANDROID=path/to/webrtc/trunk/tools/android
   cd path/to/chromium/src/
   for ARCH in arm arm64 ia32 x64; do
     GYP_DEFINES="OS=android target_arch=$ARCH" \
     GYP_GENERATOR_FLAGS="output_dir=out_$ARCH" build/gyp_chromium && \
     ninja -C out_$ARCH/Release host_forwarder md5sum && \
     mkdir -p $TOOLS_ANDROID/target-$ARCH && \
     cp -r out_$ARCH/Release/md5sum_dist $TOOLS_ANDROID/target-$ARCH
   done

5. Copy the host platform specific binaries (doesn't matter which of the output
   folders you use, these binaries should be identical):
   cp out_arm/Release/md5sum_bin_host $TOOLS_ANDROID/linux
   cp out_arm/Release/host_forwarder $TOOLS_ANDROID/linux

6. Create a CL by running gcl change in $TOOLS_ANDROID.

7. Get your CL reviewed and commit when approved.

Mac:
Follow the steps above, but with these customizations for the different compile
artifacts.

md5sum
Build on Linux. Use that.

md5sum_bin_host
* Modify tools/android/md5sum.gyp:
   Remove all targets except for md5sum_bin_host
* build/gyp_chromium --depth=. tools/android/md5sum/md5sum.gyp
* Navigate to tools/android/md5sum
* make -f md5sum.Makefile

host_forwarder
These modifications will result in daemon not being terminated correctly.
However, it works:
* Modify tools/android/forwarder2/forwarder.gyp:
   Remove all targets except host_forwarder
* Modify socket.cc:
   Remove the GetUnixDomainSocketProcessOwner implementation.
   Replace the undefine defines with their actual value.
* Modify daemon.cc:
   Remove the body of bool Daemon::Kill() and make it just return true.
* Modify trace.cc:
   Remove usage of casting -1 to pthread_t. Remove the CHECK_NE

